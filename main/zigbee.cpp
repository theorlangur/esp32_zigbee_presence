#include "esp_check.h"
#include "esp_log.h"
#include "nvs_flash.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"

#include "zigbee.hpp"
#include "esp_zigbee_core.h"

#include <thread>

namespace zb
{
    constexpr uint8_t PRESENCE_EP = 1;

    static char g_Manufacturer[] = "Orlangur\0";
    static char g_Model[] = "Presence\0";

    void create_presence_ep(esp_zb_ep_list_t *ep_list, uint8_t ep_id)
    {
        esp_zb_basic_cluster_cfg_t basic_cfg =                                                                                \
            {                                                                                       
                .zcl_version = ESP_ZB_ZCL_BASIC_ZCL_VERSION_DEFAULT_VALUE,                          
                .power_source = ESP_ZB_ZCL_BASIC_POWER_SOURCE_DEFAULT_VALUE,                        
            };                                                                                      
        esp_zb_identify_cluster_cfg_t identify_cfg =                                                                             
            {                                                                                       
                .identify_time = ESP_ZB_ZCL_IDENTIFY_IDENTIFY_TIME_DEFAULT_VALUE,                   
            };                                                                                      
        esp_zb_ias_zone_cluster_cfg_t presence_cfg =                                                                            
            {                                                                                       
                /*uint8_t*/  .zone_state = 0,                                  /*!< zone state */
                /*uint16_t*/ .zone_type = ESP_ZB_ZCL_IAS_ZONE_ZONETYPE_MOTION, /*!< zone type */
                /*uint16_t*/ .zone_status=0,                                   /*!< zone status */
                /*esp_zb_ieee_addr_t*/ .ias_cie_addr = {},                     /*!< IAS CIE Address that commands generated by server SHALL be sent to */
                /*uint8_t*/   .zone_id = 0,                                    /*!< zone id */
                /*esp_zb_zcl_ias_zone_int_ctx_t*/ .zone_ctx = {}               /*!< zone context*/
            };                                                                                      
        esp_zb_cluster_list_t *cluster_list = esp_zb_zcl_cluster_list_create();
        esp_zb_attribute_list_t *basic_cluster = esp_zb_basic_cluster_create(&basic_cfg);
        ESP_ERROR_CHECK(esp_zb_basic_cluster_add_attr(basic_cluster, ESP_ZB_ZCL_ATTR_BASIC_MANUFACTURER_NAME_ID, g_Manufacturer));
        ESP_ERROR_CHECK(esp_zb_basic_cluster_add_attr(basic_cluster, ESP_ZB_ZCL_ATTR_BASIC_MODEL_IDENTIFIER_ID, g_Model));
        ESP_ERROR_CHECK(esp_zb_cluster_list_add_basic_cluster(cluster_list, basic_cluster, ESP_ZB_ZCL_CLUSTER_SERVER_ROLE));
        ESP_ERROR_CHECK(esp_zb_cluster_list_add_identify_cluster(cluster_list, esp_zb_identify_cluster_create(&identify_cfg), ESP_ZB_ZCL_CLUSTER_SERVER_ROLE));
        ESP_ERROR_CHECK(esp_zb_cluster_list_add_identify_cluster(cluster_list, esp_zb_zcl_attr_list_create(ESP_ZB_ZCL_CLUSTER_ID_IDENTIFY), ESP_ZB_ZCL_CLUSTER_CLIENT_ROLE));
        ESP_ERROR_CHECK(esp_zb_cluster_list_add_ias_zone_cluster(cluster_list, esp_zb_ias_zone_cluster_create(&presence_cfg), ESP_ZB_ZCL_CLUSTER_SERVER_ROLE));

        esp_zb_endpoint_config_t endpoint_config = {
            .endpoint = ep_id,
            .app_profile_id = ESP_ZB_AF_HA_PROFILE_ID,
            .app_device_id = ESP_ZB_HA_IAS_ZONE_ID,
            .app_device_version = 0
        };
        esp_zb_ep_list_add_ep(ep_list, cluster_list, endpoint_config);
    }

    void zigbee_main()
    {
        esp_zb_cfg_t zb_nwk_cfg = {                                                               
            .esp_zb_role = ESP_ZB_DEVICE_TYPE_ED,                       
            .install_code_policy = false,           
            .nwk_cfg = {
                .zed_cfg = {                                        
                    .ed_timeout = ESP_ZB_ED_AGING_TIMEOUT_16MIN,                         
                    .keep_alive = 3000,                            
                }
            },                                                          
        };
        esp_zb_init(&zb_nwk_cfg);

        //config clusters here
        esp_zb_ep_list_t *ep_list = esp_zb_ep_list_create();
        create_presence_ep(ep_list, PRESENCE_EP);

        /* Register the device */
        esp_zb_device_register(ep_list);

        /* Config the reporting info  */
        esp_zb_zcl_reporting_info_t reporting_info = {
            .direction = ESP_ZB_ZCL_CMD_DIRECTION_TO_SRV,
            .ep = PRESENCE_EP,
            .cluster_id = ESP_ZB_ZCL_CLUSTER_ID_IAS_ZONE,
            .cluster_role = ESP_ZB_ZCL_CLUSTER_SERVER_ROLE,
            .attr_id = ESP_ZB_ZCL_ATTR_IAS_ZONE_ZONESTATUS_ID,
            .flags = {},
            .run_time = {},
            .u = {
                .send_info = {
                    .min_interval = 1,
                    .max_interval = 0,
                    .delta = {.u8 = 1},
                    .reported_value = {.u8 = 0},//current value?
                    .def_min_interval = 1,
                    .def_max_interval = 0,
                }
            },
            .dst = { .short_addr = {}, .endpoint = {}, .profile_id = ESP_ZB_AF_HA_PROFILE_ID},
            .manuf_code = ESP_ZB_ZCL_ATTR_NON_MANUFACTURER_SPECIFIC,
        };

        esp_zb_zcl_update_reporting_info(&reporting_info);

        esp_zb_set_primary_network_channel_set(ESP_ZB_TRANSCEIVER_ALL_CHANNELS_MASK);

        ESP_ERROR_CHECK(esp_zb_start(false));
        esp_zb_stack_main_loop();
    }

    void setup()
    {
        esp_zb_platform_config_t config = {
            .radio_config = {.radio_mode = ZB_RADIO_MODE_NATIVE, .radio_uart_config = {}},
            .host_config = {.host_connection_mode = ZB_HOST_CONNECTION_MODE_NONE, .host_uart_config = {}},
        };
        ESP_ERROR_CHECK(nvs_flash_init());
        ESP_ERROR_CHECK(esp_zb_platform_config(&config));
        
        std::thread zigbeeTask(&zigbee_main);
        zigbeeTask.detach();
    }
}
